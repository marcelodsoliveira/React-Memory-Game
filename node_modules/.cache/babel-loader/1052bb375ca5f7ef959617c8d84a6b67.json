{"ast":null,"code":"var _jsxFileName = \"/home/marcelos/Documentos/MyProjects/React-Memory-Game/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport * as C from './App.styles';\nimport logoImage from './assets/devmemory_logo.png';\nimport RestartIcon from './svgs/restart.svg';\nimport { Button } from './components/Button';\nimport { InfoItem } from './components/InfoItem';\nimport { GridItem } from './components/GridItem';\nimport { items } from './data/items';\nimport { formatTimeElapsed } from './helpers/formatTimeElapsed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [playing, setPlaying] = useState(false);\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [moveCount, setMoveCount] = useState(0);\n  const [shownCount, setShownCount] = useState(0);\n  const [gridItems, setGridItems] = useState([]);\n  useEffect(() => resetAndCreateGrid(), []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (playing) setTimeElapsed(timeElapsed + 1);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [playing, timeElapsed]);\n\n  const resetAndCreateGrid = () => {\n    // passo 1 - resetar o jogo\n    setTimeElapsed(0);\n    setMoveCount(0);\n    setShownCount(0); // passo 2 - criar o grid e começar o jogo\n    // 2.1  - criar um grid vazio\n\n    let tmpGrid = [];\n\n    for (let i = 0; i < items.length * 2; i++) tmpGrid.push({\n      item: null,\n      shown: false,\n      permanentShown: false\n    }); // 2.2 - preencher o grid\n\n\n    for (let w = 0; w < 2; w++) {\n      for (let i = 0; i < items.length; i++) {\n        let pos = -1;\n\n        while (pos < 0 || tmpGrid[pos].item !== null) {\n          pos = Math.floor(Math.random() * (items.length * 2));\n        }\n\n        tmpGrid[pos].item = i;\n      }\n    } // 2.3 - jogar no state\n\n\n    setGridItems(tmpGrid); // passo 3 - começar o jogo\n\n    setPlaying(true);\n  };\n\n  const handleItemClick = index => {\n    if (playing && index !== null && shownCount < 2) {\n      let tmpGrid = [...gridItems];\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(C.Container, {\n    children: [/*#__PURE__*/_jsxDEV(C.Info, {\n      children: [/*#__PURE__*/_jsxDEV(C.LogoLink, {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImage,\n          width: \"200\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(C.InfoArea, {\n        children: [/*#__PURE__*/_jsxDEV(InfoItem, {\n          label: \"Tempo\",\n          value: formatTimeElapsed(timeElapsed)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoItem, {\n          label: \"Movimentos\",\n          value: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"Reiniciar\",\n        icon: RestartIcon,\n        onClick: resetAndCreateGrid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(C.GridArea, {\n      children: /*#__PURE__*/_jsxDEV(C.Grid, {\n        children: gridItems.map((item, index) => /*#__PURE__*/_jsxDEV(GridItem, {\n          item: item,\n          onClick: () => handleItemClick(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Q9wu0lb9tJJWlgw8rW2i1qVqvN0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","C","logoImage","RestartIcon","Button","InfoItem","GridItem","items","formatTimeElapsed","App","playing","setPlaying","timeElapsed","setTimeElapsed","moveCount","setMoveCount","shownCount","setShownCount","gridItems","setGridItems","resetAndCreateGrid","timer","setInterval","clearInterval","tmpGrid","i","length","push","item","shown","permanentShown","w","pos","Math","floor","random","handleItemClick","index","map"],"sources":["/home/marcelos/Documentos/MyProjects/React-Memory-Game/src/App.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport * as C from './App.styles';\n\nimport logoImage from './assets/devmemory_logo.png';\nimport RestartIcon from './svgs/restart.svg'\n\nimport { Button } from './components/Button';\nimport { InfoItem } from './components/InfoItem';\nimport { GridItem } from './components/GridItem';\n\nimport { GridItemType } from './types/GridItemType';\nimport { items} from './data/items';\nimport { formatTimeElapsed } from './helpers/formatTimeElapsed';\n\n\n\n\nconst App = () => {\n  const [playing, setPlaying] = useState<boolean>(false);\n  const [timeElapsed, setTimeElapsed] = useState<number>(0);\n  const [moveCount, setMoveCount] = useState<number>(0);\n  const [shownCount, setShownCount] = useState<number>(0);\n  const [gridItems, setGridItems] = useState<GridItemType[]>([]);\n\n  useEffect(() => resetAndCreateGrid(), []);\n\n  useEffect(()=> {\n    const timer = setInterval(() => {\n      if(playing) setTimeElapsed(timeElapsed + 1);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [playing, timeElapsed]);\n\n  const resetAndCreateGrid = () => {\n    // passo 1 - resetar o jogo\n    setTimeElapsed(0);\n    setMoveCount(0);\n    setShownCount(0);\n    \n    \n    // passo 2 - criar o grid e começar o jogo\n    // 2.1  - criar um grid vazio\n    let tmpGrid: GridItemType[] = [];\n    for( let i = 0; i < (items.length * 2); i++) tmpGrid.push({\n      item: null, shown: false, permanentShown: false\n    });\n    // 2.2 - preencher o grid\n    for(let w = 0; w < 2; w++) {\n      for(let i = 0; i < items.length; i++) {\n        let pos = -1;\n        while(pos < 0 || tmpGrid[pos].item !== null) {\n          pos = Math.floor(Math.random() * (items.length * 2));\n        }\n        tmpGrid[pos].item = i;\n      }\n    }\n    // 2.3 - jogar no state\n    setGridItems(tmpGrid);\n   \n    // passo 3 - começar o jogo\n    setPlaying(true); \n  }\n\n  const handleItemClick = (index: number) => {\n    if(playing && index !== null && shownCount < 2) {\n      let tmpGrid = [...gridItems]\n    }\n  }\n\n  return (\n    <C.Container>\n      <C.Info>\n        <C.LogoLink>\n          <img src={logoImage} width=\"200\" alt=\"\" />\n        </C.LogoLink>\n\n        <C.InfoArea>\n          <InfoItem label=\"Tempo\" value={formatTimeElapsed(timeElapsed)} />\n          <InfoItem label=\"Movimentos\" value=\"0\" />\n        </C.InfoArea>\n\n        <Button label=\"Reiniciar\" icon={RestartIcon} onClick={resetAndCreateGrid} />\n      </C.Info>\n      <C.GridArea>\n        <C.Grid>\n          {gridItems.map((item, index)=>(\n            <GridItem \n              key={index}\n              item={item}\n              onClick={() => handleItemClick(index)}\n            />\n          ))}\n        </C.Grid>\n      </C.GridArea>\n    </C.Container>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}